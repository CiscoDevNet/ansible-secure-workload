---
- name: Converge
  hosts: localhost
  connection: local

  tasks:
    - name: "Include ansible-module"
      include_role:
        name: "ansible-module"

    - name: read variables from the environment that are set in the molecule.yml
      set_fact:
        ansible_host: "{{ lookup('env', 'TETRATION_SERVER_ENDPOINT') }}"
        api_key: "{{ lookup('env', 'TETRATION_API_KEY') }}"
        api_secret: "{{ lookup('env', 'TETRATION_API_SECRET') }}"
      no_log: True 

    - name: put the variables in the required format
      set_fact:
        provider_info:
          api_key: "{{ api_key }}"
          api_secret: "{{ api_secret }}"
          server_endpoint: "{{ ansible_host }}"
      no_log: True 

    - name: set test variables
      set_fact:
        root_scope_id: 5ce71503497d4f2c23af85b7
# -----

    - name: Test - Create a primary app
      tetration_application:
        app_name: test_cicd_app
        app_scope_id: "{{ root_scope_id }}"
        description: "test_cicd_app description"
        alternate_query_mode: False
        primary: false 
        state: present
        provider: "{{ provider_info }}"
      register: output

    - name: Store - Create a primary app 
      set_fact:
        app_id: "{{ output.object.id }}"
        version: "{{ output.object.latest_adm_version }}"

    - name: Output - Create a primary app 
      debug:
        var: item
      with_items:
        - "{{ app_id }}"
        - "{{ version }}"
# -----

    - name: Test - Create Policy 
      tetration_application_policy:
        app_id: "{{ app_id }}"
        consumer_filter_name: Ignwpov
        provider_filter_name: CCP Namespace
        version: "{{ version }}"
        rank: ABSOLUTE
        policy_action: DENY 
        priority: 201 
        state: present 
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Create Policy 
      debug:
        var: output

    - name: Store - Create Policy
      set_fact:
        policy_id: "{{ output.object.id }}"

    - name: Output - Create Policy 
      assert:
        that:
          - output.failed is false
          - output.changed is true 
          - output.object.id is defined 
# -----

    - name: Test - Check when Policy Port Missing 
      tetration_application_policy_ports:
        policy_id: "{{ policy_id }}"
        proto_name: TCP
        start_port: 50
        end_port: 60
        approved: true
        state: query 
        provider: "{{ provider_info }}"
      register: port_info

    - name: Output - Check when Policy Port Missing
      debug:
        var: port_info 

    - name: Verify - Check when Policy Port Missing
      assert:
        that:
          - port_info.changed is false
          - port_info.failed is false
          - port_info.object == {} 
# -----

    - name: Test - Create Policy Port
      tetration_application_policy_ports:
        policy_id: "{{ policy_id }}"
        proto_name: TCP
        start_port: 50
        end_port: 60
        approved: true
        state: present 
        provider: "{{ provider_info }}"
      register: port_info

    - name: Output - Create Policy Port 
      debug:
        var: port_info 

    - name: Verify - Create Policy Port 
      assert:
        that:
          - port_info.changed is true 
          - port_info.failed is false
          - port_info.object is defined 
          - port_info.object.proto == 6 
# -----

    - name: Test - Update Policy Port
      tetration_application_policy_ports:
        policy_id: "{{ policy_id }}"
        proto_name: TCP
        start_port: 50
        end_port: 60
        approved: false 
        state: present 
        provider: "{{ provider_info }}"
      register: port_info

    - name: Output - Update Policy Port
      debug:
        var: port_info 

    - name: Verify - Update Policy Port
      assert:
        that:
          - port_info.changed is true 
          - port_info.failed is false
          - port_info.object is defined 
          - port_info.object.proto == 6 
          - port_info.object.approved is not defined
# -----

    - name: Test - Delete Policy Port
      tetration_application_policy_ports:
        policy_id: "{{ policy_id }}"
        proto_name: TCP
        start_port: 50
        end_port: 60
        state: absent 
        provider: "{{ provider_info }}"
      register: port_info

    - name: Output - Delete Policy Port
      debug:
        var: port_info 

    - name: Verify - Delete Policy Port
      assert:
        that:
          - port_info.changed is true 
          - port_info.failed is false
          - port_info.object.success is true

# -----

    - name: Test - Delete Policy 
      tetration_application_policy:
        app_id: "{{ app_id }}"
        consumer_filter_name: Ignwpov
        provider_filter_name: CCP Namespace
        version: "{{ version }}"
        rank: ABSOLUTE
        policy_action: DENY 
        priority: 201 
        state: absent 
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Delete Policy 
      debug:
        var: output

    - name: Output - Create Policy 
      assert:
        that:
          - output.failed is false
          - output.changed is true 
          - output.object.success is true
# -----

    - name: Test - Delete primary app
      tetration_application:
        app_name: test_cicd_app
        app_scope_id: "{{ root_scope_id }}"
        description: "test_cicd_app description"
        alternate_query_mode: False
        primary: false 
        state: absent 
        provider: "{{ provider_info }}"
      register: output
