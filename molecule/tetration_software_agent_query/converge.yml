---
- name: Converge
  hosts: localhost
  connection: local

  tasks:
    - name: "Include ansible-module"
      include_role:
        name: "ansible-module"

    - name: read variables from the environment that are set in the molecule.yml
      set_fact:
        ansible_host: "{{ lookup('env', 'TETRATION_SERVER_ENDPOINT') }}"
        api_key: "{{ lookup('env', 'TETRATION_API_KEY') }}"
        api_secret: "{{ lookup('env', 'TETRATION_API_SECRET') }}"
      no_log: True

    - name: put the variables in the required format
      set_fact:
        provider_info:
          api_key: "{{ api_key }}"
          api_secret: "{{ api_secret }}"
          server_endpoint: "{{ ansible_host }}"
      no_log: True

    - name: set test variables
      set_fact:
        root_scope: "{{ lookup('env', 'TETRATION_ROOT_SCOPE_NAME') }}"
        root_scope_id: "{{ lookup('env', 'TETRATION_ROOT_SCOPE_ID') }}"
    # -----

    - name: Test - Can find matching hostnames
      tetration_software_agent_query:
        host_name_contains: test-sensor
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find matching hostnames
      debug:
        var: output

    - name: Verify - Can find matching hostnames
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Can find exact hostname
      tetration_software_agent_query:
        host_name_is_exactly: github-integration-test-sensor
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find exact hostname
      debug:
        var: output

    - name: Verify - Can find exact hostname
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Can find all agents
      tetration_software_agent_query:
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find all agents
      debug:
        var: output.items_found

    - name: Verify - Can find all agents
      assert:
        that:
          - output.items_found > 0
    # -----

    - name: Test - Can find an IPv4 Address
      tetration_software_agent_query:
        interface_ip_is_exactly: "172.31.27.18"
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find an IPv4 Address
      debug:
        var: output.items_found

    - name: Verify - Can find an IPv4 Address
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Can find an IPv6 Address
      tetration_software_agent_query:
        interface_ip_is_exactly: "fe80::91:32ff:fef1:5de5"
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find an IPv6 Address
      debug:
        var: output.items_found

    - name: Verify - Can find an IPv6 Address
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Error on invalid IPv4 address
      tetration_software_agent_query:
        interface_ip_is_exactly: "10.138.0.257"
        provider: "{{ provider_info }}"
      ignore_errors: true
      register: output

    - name: Output - Error on invalid IPv4 address
      debug:
        var: output

    - name: Expected Output - Error on invalid IPv4 address
      set_fact:
        expected_output: >-
          Invalid IPv4 or IPv6 Address entered.  Value entered: 10.138.0.257

    - name: Verify - Error on invalid IPv4 address
      assert:
        that:
          - output.msg == expected_output
    # -----

    - name: Test - Test error on invalid IPv6 Address
      tetration_software_agent_query:
        interface_ip_is_exactly: "fe80::4001:gff:fe8a:e"
        provider: "{{ provider_info }}"
      ignore_errors: true
      register: output

    - name: Verify - Test error on invalid IPv6 Address
      debug:
        var: output

    - name: Expected Output - Error on invalid IPv6 address
      set_fact:
        expected_output: >-
          Invalid IPv4 or IPv6 Address entered.  Value entered: fe80::4001:gff:fe8a:e

    - name: Output - Test error on invalid IPv6 Address
      assert:
        that:
          - output.msg == expected_output
    # -----

    - name: Test - Can find devices in IPv4 Network
      tetration_software_agent_query:
        interface_ip_in_network: "172.31.27.0/24"
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find devices in IPv4 Network
      debug:
        var: output.items_found

    - name: Verify - Can find devices in IPv4 Network
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Can find devices in IPv6 Network
      tetration_software_agent_query:
        interface_ip_in_network: "fe80:0000:0000:0000:0000:0000:0000:0000/64"
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Can find devices in IPv6 Network
      debug:
        var: output.items_found

    - name: Verify - Can find devices in IPv6 Network
      assert:
        that:
          - output.items_found == 1
    # -----

    - name: Test - Error on invalid IPv4 Network
      tetration_software_agent_query:
        interface_ip_in_network: "10.138.0.257"
        provider: "{{ provider_info }}"
      ignore_errors: true
      register: output

    - name: Output - Error on invalid IPv4 Network
      debug:
        var: output

    - name: Expected Output - Error on invalid IPv4 Network
      set_fact:
        expected_output: >-
          Invalid IPv4 or IPv6 Network entered.  Value entered: 10.138.0.257

    - name: Verify - Error on invalid IPv4 Network
      assert:
        that:
          - output.msg == expected_output
    # -----

    - name: Test - Error on invalid IPv6 Network
      tetration_software_agent_query:
        interface_ip_in_network: "fe80::4001:ffg:fe8a:e"
        provider: "{{ provider_info }}"
      ignore_errors: true
      register: output

    - name: Output - Error on invalid IPv6 Network
      debug:
        var: output

    - name: Expected Output - Error on invalid IPv6 Network
      set_fact:
        expected_output: >-
          Invalid IPv4 or IPv6 Network entered.  Value entered: fe80::4001:ffg:fe8a:e

    - name: Verify - Error on invalid IPv6 Network
      assert:
        that:
          - output.msg == expected_output
