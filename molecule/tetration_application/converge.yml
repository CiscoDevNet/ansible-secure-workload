---
- name: Converge
  hosts: localhost
  connection: local

  tasks:
    - name: "Include ansible-module"
      include_role:
        name: "ansible-module"

    - name: read variables from the environment that are set in the molecule.yml
      set_fact:
        ansible_host: "{{ lookup('env', 'TETRATION_SERVER_ENDPOINT') }}"
        api_key: "{{ lookup('env', 'TETRATION_API_KEY') }}"
        api_secret: "{{ lookup('env', 'TETRATION_API_SECRET') }}"
      no_log: True

    - name: put the variables in the required format
      set_fact:
        provider_info:
          api_key: "{{ api_key }}"
          api_secret: "{{ api_secret }}"
          server_endpoint: "{{ ansible_host }}"
      no_log: True

    - name: set test variables
      set_fact:
        root_scope: "{{ lookup('env', 'TETRATION_ROOT_SCOPE_NAME') }}"
        root_scope_id: "{{ lookup('env', 'TETRATION_ROOT_SCOPE_ID') }}"
    # -----

    - name: Test - Create a primary app scope
      tetration_application:
        app_name: test_cicd_app
        app_scope_id: "{{ root_scope_id }}"
        description: "test_cicd_app description"
        alternate_query_mode: False
        primary: True
        state: present
        provider: "{{ provider_info }}"
      register: output

    - name: Store - Create a primary app scope
      set_fact:
        app_id: "{{ output.object.id }}"

    - name: Output - Create a primary app scope
      debug:
        var: item
      with_items:
        - "{{ app_id }}"
        - "{{ output }}"

    - name: Verify - Create a primary app scope
      assert:
        that:
          - output.changed is true
          - output.object.id is defined
          - output.object.primary is true
          - output.failed is false
    # -----

    - name: Test - Verify a primary app scope doesn't update
      tetration_application:
        app_name: test_cicd_app
        app_scope_id: "{{ root_scope_id }}"
        description: "test_cicd_app description"
        alternate_query_mode: False
        primary: True
        state: present
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Verify a primary app scope doesn't update
      debug:
        var: output

    - name: Verify - Verify a primary app scope doesn't update
      assert:
        that:
          - output.changed is false
          - output.object.id is defined
          - output.object.primary is true
          - output.failed is false
    # -----

    - name: Test - Verify update primary app
      tetration_application:
        app_id: "{{ app_id }}"
        app_name: updated test_cicd_app
        description: updated test_cicd_app description
        state: present
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Verify update primary app
      debug:
        var: output

    - name: Verify - Verify update primary app
      assert:
        that:
          - output.changed is true
          - output.object.id is defined
          - output.object.primary is true
          - output.failed is false
          - output.object.name == 'updated test_cicd_app'
          - output.object.description == 'updated test_cicd_app description'

    # -----

    - name: Test - Attempt to delete app while primary
      tetration_application:
        app_id: "{{ app_id }}"
        app_name: updated test_cicd_app
        description: "updated test_cicd_app description"
        state: absent
        provider: "{{ provider_info }}"
      register: output
      ignore_errors: true

    - name: Output - Attempt to delete app while primary
      debug:
        var: output

    - name: Verify - Attempt to delete app while primary
      assert:
        that:
          - output.failed is true
          - output.msg == "Cannot delete primary application.  Try making application secondary before deleting"
    # -----

    - name: Test - Verify update primary app to be secondary
      tetration_application:
        app_id: "{{ app_id }}"
        primary: false
        state: present
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Verify update primary app to be secondary
      debug:
        var: output

    - name: Verify - Verify update primary app to be secondary
      assert:
        that:
          - output.changed is true
          - output.object.id is defined
          - output.object.primary is false
          - output.failed is false
    # -----

    - name: Test - Attempt to delete app while secondary
      tetration_application:
        app_name: updated test_cicd_app
        state: absent
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Attempt to delete app while secondary
      debug:
        var: output

    - name: Verify - Attempt to delete app while secondary
      assert:
        that:
          - output.failed is false
          - output.object.success is true
          - output.changed is true

    # -----

    - name: Test - Attempt to delete app that's already deleted
      tetration_application:
        app_name: updated test_cicd_app
        state: absent
        provider: "{{ provider_info }}"
      register: output

    - name: Output - Attempt to delete app that's already deleted
      debug:
        var: output

    - name: Verify - Attempt to delete app that's already deleted
      assert:
        that:
          - output.failed is false
          - output.object is none
          - output.changed is false
