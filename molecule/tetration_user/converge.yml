---
- name: Converge
  hosts: localhost
  connection: local

  tasks:
    - name: "Include ansible-module"
      include_role:
        name: "ansible-module"

    - name: read variables from the environment that are set in the molecule.yml
      set_fact:
        ansible_host: "{{ lookup('env', 'TETRATION_SERVER_ENDPOINT') }}"
        api_key: "{{ lookup('env', 'TETRATION_API_KEY') }}"
        api_secret: "{{ lookup('env', 'TETRATION_API_SECRET') }}"
      no_log: true

    - name: put the variables in the required format
      set_fact:
        provider_info:
          api_key: "{{ api_key }}"
          api_secret: "{{ api_secret }}"
          server_endpoint: "{{ ansible_host }}"
      no_log: true

    - name: Set expected return value for invalid parameters
      set_fact:
        expected_invalid_parameter_msg: "Check the `invalid parameters` object for the invalid parameters"

    - name: Test - Query if a fake user exists
      tetration_user:
        provider: "{{ provider_info }}"
        email: fake@not.real
        state: query
      delegate_to: localhost
      register: output
    - name: debug
      debug:
        var: output
    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object == none
          - output.changed is false

    - name: Test - Query if a real users exists
      tetration_user:
        provider: "{{ provider_info }}"
        email: test_user@test.com
        state: query
      delegate_to: localhost
      register: output
    - name: debug
      debug:
        var: output
    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object != none
          - output.object.last_name == 'CICD User'

    - name: Set expected return value
      set_fact:
        expected_msg: "The first name and last name parameters are required when creating a new user.  First Name:  Last Name: "

    - name: Test - Attempt to create a user with missing data
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        state: present
      delegate_to: localhost
      register: output
      ignore_errors: yes
    - name: debug
      debug:
        var: output
    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is true
          - output.msg == expected_msg


    - name: Test - Attempt to create a user with invalid app scope name
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        app_scope_name: "invalid app scope name"
        state: present
      delegate_to: localhost
      register: output
      ignore_errors: yes
    - name: debug
      debug:
        var: output
    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is true
          - output.msg == expected_invalid_parameter_msg
          - output.invalid_parameters.app_scope_name == "invalid app scope name"

    - name: Test - Attempt to create a user with valid app scope name using check mode
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        app_scope_name: "Ignwpov:Internet"
        state: present
      delegate_to: localhost
      check_mode: True
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object.first_name == 'not present'


    - name: Test - Attempt to create a user with scope id using check mode
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        app_scope_id: "5f0f2353497d4f1f59bf0aef"
        state: present
      delegate_to: localhost
      check_mode: True
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object.app_scope_id == '5f0f2353497d4f1f59bf0aef'


    - name: Test - Attempt to create a user with invalid role names
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        role_names:
          - fake_role_name1
          - fake_role_name2
        state: present
      delegate_to: localhost
      ignore_errors: yes
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is true
          - output.msg == expected_invalid_parameter_msg
          - output.invalid_parameters.role_names == ['fake_role_name1', 'fake_role_name2']

    - name: Test - Attempt to create a user with a list of role ids in check mode
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        role_ids:
          - 5ce7150a755f0267680224b3
          - 5ce71509497d4f2c23af85cf
        state: present
      delegate_to: localhost
      check_mode: True
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object.role_ids == ['5ce7150a755f0267680224b3', '5ce71509497d4f2c23af85cf']


    - name: Test - Attempt to create a user with a list of valid role names and app name in check mode
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "not present"
        last_name: "test user"
        app_scope_name: "Ignwpov:Internet"
        role_names:
          - Enforce
          - Execute
        state: present
      delegate_to: localhost
      check_mode: True
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.object.role_ids == ['5ce7150a755f0267680224b3', '5ce71509497d4f2c23af85cf']
          - output.object.app_scope_id == '5f0f2353497d4f1f59bf0aef'

    - name: Test - delete a user that does not exist
      tetration_user:
        provider: "{{ provider_info }}"
        email: not_present_test_user@test.com
        first_name: "Ansible"
        last_name: "CICD User"
        app_scope_name: "Ignwpov"
        role_names:
          - Enforce
          - Execute
        state: absent
      delegate_to: localhost
      register: output

    - name: debug
      debug:
        var: output

    - name: test results
      assert:
        that:
          - output is defined
          - output.failed is false
          - output.changed is false

    # - name: Test - delete a user 
    #   tetration_user:
    #     provider: "{{ provider_info }}"
    #     email: extremely_fake@test.com
    #     first_name: "Ansible"
    #     last_name: "CICD User"
    #     app_scope_name: "Ignwpov"
    #     role_names:
    #       - Enforce
    #       - Execute
    #     state: absent 
    #   delegate_to: localhost
    #   register: output

    # - name: debug
    #   debug:
    #     var: output

    # - name: test results
    #   assert:
    #     that:
    #       - output is defined 
    #       - output.failed is false
    #       - output.changed is true

